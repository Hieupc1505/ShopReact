{"ast":null,"code":"const Authorization = ({\n  formName,\n  rules\n}) => {\n  const form = document.forms[formName];\n\n  const validation = (ipForm, rule) => {\n    let ipVal = ipForm.value;\n    const ipErr = ipForm.nextElementSibling;\n    const isValid = rule(ipVal);\n\n    if (isValid) {\n      ipErr.textContent = isValid;\n    }\n  };\n\n  if (form) {\n    rules.forEach(({\n      ele,\n      rule\n    }) => {\n      const ipForm = form.querySelector(ele);\n\n      if (ipForm) {\n        validation(ipForm, rule);\n        ipForm.addEventListener(\"focus\", () => {\n          const ipErr = ipForm.nextElementSibling;\n          console.log(\"forcus\");\n          ipErr.textContent = \"\";\n        });\n      }\n    });\n  }\n};\n\n_c = Authorization;\n\nAuthorization.isRequired = function (select, mes) {\n  return {\n    ele: select,\n    rule: function (val) {\n      return val.trim() ? null : mes || \"Filed is Required!!\";\n    }\n  };\n};\n\nAuthorization.minLength = function (select, min = 6, mes) {\n  return {\n    ele: select,\n    rule: val => {\n      return val.lenght >= min ? null : mes || `Minximum of password is ${min} charactors`;\n    }\n  };\n};\n\nAuthorization.compare = function (select, tar) {\n  return {\n    ele: select,\n    rule: function (val) {\n      const text = typeof tar === \"function\" ? tar() : tar;\n      return val === text ? null : \"Không khớp vui lòng kiểm tra lại\";\n    }\n  };\n};\n\nexport default Authorization;\n\nvar _c;\n\n$RefreshReg$(_c, \"Authorization\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/ShopFull/client/src/component/Auth/Authorization.js"],"names":["Authorization","formName","rules","form","document","forms","validation","ipForm","rule","ipVal","value","ipErr","nextElementSibling","isValid","textContent","forEach","ele","querySelector","addEventListener","console","log","isRequired","select","mes","val","trim","minLength","min","lenght","compare","tar","text"],"mappings":"AAAA,MAAMA,aAAa,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAyB;AAC3C,QAAMC,IAAI,GAAGC,QAAQ,CAACC,KAAT,CAAeJ,QAAf,CAAb;;AAEA,QAAMK,UAAU,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;AACjC,QAAIC,KAAK,GAAGF,MAAM,CAACG,KAAnB;AAEA,UAAMC,KAAK,GAAGJ,MAAM,CAACK,kBAArB;AAEA,UAAMC,OAAO,GAAGL,IAAI,CAACC,KAAD,CAApB;;AACA,QAAII,OAAJ,EAAa;AACTF,MAAAA,KAAK,CAACG,WAAN,GAAoBD,OAApB;AACH;AACJ,GATD;;AAWA,MAAIV,IAAJ,EAAU;AACND,IAAAA,KAAK,CAACa,OAAN,CAAc,CAAC;AAAEC,MAAAA,GAAF;AAAOR,MAAAA;AAAP,KAAD,KAAmB;AAC7B,YAAMD,MAAM,GAAGJ,IAAI,CAACc,aAAL,CAAmBD,GAAnB,CAAf;;AAEA,UAAIT,MAAJ,EAAY;AACRD,QAAAA,UAAU,CAACC,MAAD,EAASC,IAAT,CAAV;AAEAD,QAAAA,MAAM,CAACW,gBAAP,CAAwB,OAAxB,EAAiC,MAAM;AACnC,gBAAMP,KAAK,GAAGJ,MAAM,CAACK,kBAArB;AAEAO,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAT,UAAAA,KAAK,CAACG,WAAN,GAAoB,EAApB;AACH,SALD;AAMH;AACJ,KAbD;AAcH;AACJ,CA9BD;;KAAMd,a;;AAgCNA,aAAa,CAACqB,UAAd,GAA2B,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;AAC9C,SAAO;AACHP,IAAAA,GAAG,EAAEM,MADF;AAEHd,IAAAA,IAAI,EAAE,UAAUgB,GAAV,EAAe;AACjB,aAAOA,GAAG,CAACC,IAAJ,KAAa,IAAb,GAAoBF,GAAG,IAAI,qBAAlC;AACH;AAJE,GAAP;AAMH,CAPD;;AASAvB,aAAa,CAAC0B,SAAd,GAA0B,UAAUJ,MAAV,EAAkBK,GAAG,GAAG,CAAxB,EAA2BJ,GAA3B,EAAgC;AACtD,SAAO;AACHP,IAAAA,GAAG,EAAEM,MADF;AAEHd,IAAAA,IAAI,EAAGgB,GAAD,IAAS;AACX,aAAOA,GAAG,CAACI,MAAJ,IAAcD,GAAd,GACD,IADC,GAEDJ,GAAG,IAAK,2BAA0BI,GAAI,aAF5C;AAGH;AANE,GAAP;AAQH,CATD;;AAWA3B,aAAa,CAAC6B,OAAd,GAAwB,UAAUP,MAAV,EAAkBQ,GAAlB,EAAuB;AAC3C,SAAO;AACHd,IAAAA,GAAG,EAAEM,MADF;AAEHd,IAAAA,IAAI,EAAE,UAAUgB,GAAV,EAAe;AACjB,YAAMO,IAAI,GAAG,OAAOD,GAAP,KAAe,UAAf,GAA4BA,GAAG,EAA/B,GAAoCA,GAAjD;AACA,aAAON,GAAG,KAAKO,IAAR,GAAe,IAAf,GAAsB,kCAA7B;AACH;AALE,GAAP;AAOH,CARD;;AAUA,eAAe/B,aAAf","sourcesContent":["const Authorization = ({ formName, rules }) => {\r\n    const form = document.forms[formName];\r\n\r\n    const validation = (ipForm, rule) => {\r\n        let ipVal = ipForm.value;\r\n\r\n        const ipErr = ipForm.nextElementSibling;\r\n\r\n        const isValid = rule(ipVal);\r\n        if (isValid) {\r\n            ipErr.textContent = isValid;\r\n        }\r\n    };\r\n\r\n    if (form) {\r\n        rules.forEach(({ ele, rule }) => {\r\n            const ipForm = form.querySelector(ele);\r\n\r\n            if (ipForm) {\r\n                validation(ipForm, rule);\r\n\r\n                ipForm.addEventListener(\"focus\", () => {\r\n                    const ipErr = ipForm.nextElementSibling;\r\n\r\n                    console.log(\"forcus\");\r\n                    ipErr.textContent = \"\";\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nAuthorization.isRequired = function (select, mes) {\r\n    return {\r\n        ele: select,\r\n        rule: function (val) {\r\n            return val.trim() ? null : mes || \"Filed is Required!!\";\r\n        },\r\n    };\r\n};\r\n\r\nAuthorization.minLength = function (select, min = 6, mes) {\r\n    return {\r\n        ele: select,\r\n        rule: (val) => {\r\n            return val.lenght >= min\r\n                ? null\r\n                : mes || `Minximum of password is ${min} charactors`;\r\n        },\r\n    };\r\n};\r\n\r\nAuthorization.compare = function (select, tar) {\r\n    return {\r\n        ele: select,\r\n        rule: function (val) {\r\n            const text = typeof tar === \"function\" ? tar() : tar;\r\n            return val === text ? null : \"Không khớp vui lòng kiểm tra lại\";\r\n        },\r\n    };\r\n};\r\n\r\nexport default Authorization;\r\n"]},"metadata":{},"sourceType":"module"}