{"ast":null,"code":"const Authorization = ({\n  formName,\n  rules\n}) => {\n  const form = document.forms[formName];\n  let ruleState = {};\n\n  const validation = (ipForm, rule) => {\n    let ipVal = ipForm.value;\n    const ipErr = ipForm.nextElementSibling;\n    let errMess;\n    let rules = ruleState[rule.ele];\n\n    for (let test of rules) {\n      errMess = test(ipVal);\n      if (errMess) break;\n    }\n\n    if (errMess) {\n      ipForm.classList.add(\"border-danger\");\n      ipErr.textContent = errMess;\n    } // const isValid = rule.test(ipVal);\n    // if (isValid) {\n    //     ipErr.textContent = isValid;\n    // }\n\n  };\n\n  if (form) {\n    //submit\n    Authorization.handleSubmit = function () {\n      rules.forEach(rule => {\n        const ipForm = form.querySelector(rule.ele);\n        validation(ipForm, rule);\n      });\n    }; //lap lay cac rule\n\n\n    rules.forEach(rule => {\n      const ipForm = form.querySelector(rule.ele);\n\n      if (ipForm) {\n        if (Array.isArray(ruleState[rule.ele])) {\n          ruleState[rule.ele].push(rule.test);\n        } else {\n          ruleState[rule.ele] = [rule.test];\n        }\n\n        ipForm.onblur = () => {\n          validation(ipForm, rule);\n        };\n\n        ipForm.addEventListener(\"focus\", () => {\n          const ipErr = ipForm.nextElementSibling;\n          ipForm.classList.remove(\"border-danger\");\n          ipErr.textContent = \"\";\n        });\n      }\n    });\n  }\n};\n\n_c = Authorization;\n\nAuthorization.isRequired = function (select, mes) {\n  return {\n    ele: select,\n    test: function (val) {\n      return val.trim() ? null : mes || \"Filed is Required!!\";\n    }\n  };\n};\n\nAuthorization.minLength = function (select, min = 6, mes) {\n  return {\n    ele: select,\n    test: val => {\n      return val.length >= min ? null : mes || `Minximum of password is ${min} charactors`;\n    }\n  };\n};\n\nAuthorization.compare = function (select, tar) {\n  return {\n    ele: select,\n    test: function (val) {\n      return val === tar() ? null : \"Không khớp vui lòng kiểm tra lại\";\n    }\n  };\n};\n\nexport default Authorization;\n\nvar _c;\n\n$RefreshReg$(_c, \"Authorization\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/ShopFull/client/src/component/MainPages/Auth/Authorization.js"],"names":["Authorization","formName","rules","form","document","forms","ruleState","validation","ipForm","rule","ipVal","value","ipErr","nextElementSibling","errMess","ele","test","classList","add","textContent","handleSubmit","forEach","querySelector","Array","isArray","push","onblur","addEventListener","remove","isRequired","select","mes","val","trim","minLength","min","length","compare","tar"],"mappings":"AAAA,MAAMA,aAAa,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAyB;AAC3C,QAAMC,IAAI,GAAGC,QAAQ,CAACC,KAAT,CAAeJ,QAAf,CAAb;AAEA,MAAIK,SAAS,GAAG,EAAhB;;AAEA,QAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;AACjC,QAAIC,KAAK,GAAGF,MAAM,CAACG,KAAnB;AACA,UAAMC,KAAK,GAAGJ,MAAM,CAACK,kBAArB;AACA,QAAIC,OAAJ;AAEA,QAAIZ,KAAK,GAAGI,SAAS,CAACG,IAAI,CAACM,GAAN,CAArB;;AAEA,SAAK,IAAIC,IAAT,IAAiBd,KAAjB,EAAwB;AACpBY,MAAAA,OAAO,GAAGE,IAAI,CAACN,KAAD,CAAd;AACA,UAAII,OAAJ,EAAa;AAChB;;AAED,QAAIA,OAAJ,EAAa;AACTN,MAAAA,MAAM,CAACS,SAAP,CAAiBC,GAAjB,CAAqB,eAArB;AACAN,MAAAA,KAAK,CAACO,WAAN,GAAoBL,OAApB;AACH,KAfgC,CAiBjC;AACA;AACA;AACA;;AACH,GArBD;;AAuBA,MAAIX,IAAJ,EAAU;AACN;AACAH,IAAAA,aAAa,CAACoB,YAAd,GAA6B,YAAY;AACrClB,MAAAA,KAAK,CAACmB,OAAN,CAAeZ,IAAD,IAAU;AACpB,cAAMD,MAAM,GAAGL,IAAI,CAACmB,aAAL,CAAmBb,IAAI,CAACM,GAAxB,CAAf;AACAR,QAAAA,UAAU,CAACC,MAAD,EAASC,IAAT,CAAV;AACH,OAHD;AAIH,KALD,CAFM,CASN;;;AACAP,IAAAA,KAAK,CAACmB,OAAN,CAAeZ,IAAD,IAAU;AACpB,YAAMD,MAAM,GAAGL,IAAI,CAACmB,aAAL,CAAmBb,IAAI,CAACM,GAAxB,CAAf;;AAEA,UAAIP,MAAJ,EAAY;AACR,YAAIe,KAAK,CAACC,OAAN,CAAclB,SAAS,CAACG,IAAI,CAACM,GAAN,CAAvB,CAAJ,EAAwC;AACpCT,UAAAA,SAAS,CAACG,IAAI,CAACM,GAAN,CAAT,CAAoBU,IAApB,CAAyBhB,IAAI,CAACO,IAA9B;AACH,SAFD,MAEO;AACHV,UAAAA,SAAS,CAACG,IAAI,CAACM,GAAN,CAAT,GAAsB,CAACN,IAAI,CAACO,IAAN,CAAtB;AACH;;AAEDR,QAAAA,MAAM,CAACkB,MAAP,GAAgB,MAAM;AAClBnB,UAAAA,UAAU,CAACC,MAAD,EAASC,IAAT,CAAV;AACH,SAFD;;AAIAD,QAAAA,MAAM,CAACmB,gBAAP,CAAwB,OAAxB,EAAiC,MAAM;AACnC,gBAAMf,KAAK,GAAGJ,MAAM,CAACK,kBAArB;AACAL,UAAAA,MAAM,CAACS,SAAP,CAAiBW,MAAjB,CAAwB,eAAxB;AACAhB,UAAAA,KAAK,CAACO,WAAN,GAAoB,EAApB;AACH,SAJD;AAKH;AACJ,KApBD;AAqBH;AACJ,CA5DD;;KAAMnB,a;;AA8DNA,aAAa,CAAC6B,UAAd,GAA2B,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;AAC9C,SAAO;AACHhB,IAAAA,GAAG,EAAEe,MADF;AAEHd,IAAAA,IAAI,EAAE,UAAUgB,GAAV,EAAe;AACjB,aAAOA,GAAG,CAACC,IAAJ,KAAa,IAAb,GAAoBF,GAAG,IAAI,qBAAlC;AACH;AAJE,GAAP;AAMH,CAPD;;AASA/B,aAAa,CAACkC,SAAd,GAA0B,UAAUJ,MAAV,EAAkBK,GAAG,GAAG,CAAxB,EAA2BJ,GAA3B,EAAgC;AACtD,SAAO;AACHhB,IAAAA,GAAG,EAAEe,MADF;AAEHd,IAAAA,IAAI,EAAGgB,GAAD,IAAS;AACX,aAAOA,GAAG,CAACI,MAAJ,IAAcD,GAAd,GACD,IADC,GAEDJ,GAAG,IAAK,2BAA0BI,GAAI,aAF5C;AAGH;AANE,GAAP;AAQH,CATD;;AAWAnC,aAAa,CAACqC,OAAd,GAAwB,UAAUP,MAAV,EAAkBQ,GAAlB,EAAuB;AAC3C,SAAO;AACHvB,IAAAA,GAAG,EAAEe,MADF;AAEHd,IAAAA,IAAI,EAAE,UAAUgB,GAAV,EAAe;AACjB,aAAOA,GAAG,KAAKM,GAAG,EAAX,GAAgB,IAAhB,GAAuB,kCAA9B;AACH;AAJE,GAAP;AAMH,CAPD;;AASA,eAAetC,aAAf","sourcesContent":["const Authorization = ({ formName, rules }) => {\r\n    const form = document.forms[formName];\r\n\r\n    let ruleState = {};\r\n\r\n    const validation = (ipForm, rule) => {\r\n        let ipVal = ipForm.value;\r\n        const ipErr = ipForm.nextElementSibling;\r\n        let errMess;\r\n\r\n        let rules = ruleState[rule.ele];\r\n\r\n        for (let test of rules) {\r\n            errMess = test(ipVal);\r\n            if (errMess) break;\r\n        }\r\n\r\n        if (errMess) {\r\n            ipForm.classList.add(\"border-danger\");\r\n            ipErr.textContent = errMess;\r\n        }\r\n\r\n        // const isValid = rule.test(ipVal);\r\n        // if (isValid) {\r\n        //     ipErr.textContent = isValid;\r\n        // }\r\n    };\r\n\r\n    if (form) {\r\n        //submit\r\n        Authorization.handleSubmit = function () {\r\n            rules.forEach((rule) => {\r\n                const ipForm = form.querySelector(rule.ele);\r\n                validation(ipForm, rule);\r\n            });\r\n        };\r\n\r\n        //lap lay cac rule\r\n        rules.forEach((rule) => {\r\n            const ipForm = form.querySelector(rule.ele);\r\n\r\n            if (ipForm) {\r\n                if (Array.isArray(ruleState[rule.ele])) {\r\n                    ruleState[rule.ele].push(rule.test);\r\n                } else {\r\n                    ruleState[rule.ele] = [rule.test];\r\n                }\r\n\r\n                ipForm.onblur = () => {\r\n                    validation(ipForm, rule);\r\n                };\r\n\r\n                ipForm.addEventListener(\"focus\", () => {\r\n                    const ipErr = ipForm.nextElementSibling;\r\n                    ipForm.classList.remove(\"border-danger\");\r\n                    ipErr.textContent = \"\";\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nAuthorization.isRequired = function (select, mes) {\r\n    return {\r\n        ele: select,\r\n        test: function (val) {\r\n            return val.trim() ? null : mes || \"Filed is Required!!\";\r\n        },\r\n    };\r\n};\r\n\r\nAuthorization.minLength = function (select, min = 6, mes) {\r\n    return {\r\n        ele: select,\r\n        test: (val) => {\r\n            return val.length >= min\r\n                ? null\r\n                : mes || `Minximum of password is ${min} charactors`;\r\n        },\r\n    };\r\n};\r\n\r\nAuthorization.compare = function (select, tar) {\r\n    return {\r\n        ele: select,\r\n        test: function (val) {\r\n            return val === tar() ? null : \"Không khớp vui lòng kiểm tra lại\";\r\n        },\r\n    };\r\n};\r\n\r\nexport default Authorization;\r\n"]},"metadata":{},"sourceType":"module"}