{"ast":null,"code":"import { ALL_CART_REQUEST, ALL_CART_SUCCESS, ALL_CART_FAIL, POST_CART, POST_CART_SUCCESS, ADD_TO_CART, SERVER, DELETE_FROM_CART } from \"./typeCart\";\nimport axios from \"axios\";\nexport const AllCartRequest = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_CART_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`${SERVER}/api/cart`); // console.log(data);\n\n    dispatch({\n      type: ALL_CART_SUCCESS,\n      payload: {\n        cart: data.cart\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALL_CART_FAIL,\n      payload: {\n        error: err.response.data.message || \"Get all cart is fail\"\n      }\n    });\n  }\n};\nexport const postCart = cartState => async dispatch => {\n  try {\n    dispatch({\n      type: POST_CART\n    });\n    const {\n      data\n    } = await axios.post(`${SERVER}/api/cart/add`, cartState);\n    dispatch({\n      type: POST_CART_SUCCESS,\n      payload: {\n        cart: data.cart\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALL_CART_FAIL,\n      payload: {\n        error: err.response.data.message || \"Get all cart is fail\"\n      }\n    });\n  }\n};\nexport const AddToCart = (pro, num) => async (dispatch, getState) => {\n  const {\n    _id\n  } = pro;\n  const state = getState();\n  const {\n    cart\n  } = state.cartReducer;\n  const isCheck = cart.some(item => item._id === _id);\n\n  if (isCheck) {\n    alert(\"Sản phẩm đã có trong giỏ\");\n    return state;\n  } else {\n    try {\n      await dispatch({\n        type: ADD_TO_CART,\n        payload: {\n          newItem: {\n            num,\n            ...pro\n          }\n        }\n      });\n      await axios.post(`${SERVER}/api/cart/add`, [{ ...pro,\n        num\n      }, ...cart]);\n    } catch (err) {\n      dispatch({\n        type: ALL_CART_FAIL,\n        payload: {\n          error: err.response.data.message || \"Post cart fail\"\n        }\n      });\n    }\n  } // const { cart } = state.cartReducer;\n\n};\nexport const SingleDeleteCart = numId => async (dispatch, getState) => {\n  const state = getState();\n  const {\n    cart\n  } = state.cartReducer;\n  cart.forEach((item, index) => {\n    if (item._id === numId) cart.splice(index, 1);\n  });\n\n  try {\n    dispatch({\n      type: POST_CART\n    });\n    await axios.post(`${SERVER}/api/cart/add`, cart);\n    dispatch({\n      type: DELETE_FROM_CART,\n      payload: {\n        cart: cart\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALL_CART_FAIL,\n      payload: {\n        error: err.response.data.message || \"Remove product fail\"\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/DELL/Desktop/ShopFull/client/src/Redux/Cart/actionCard.js"],"names":["ALL_CART_REQUEST","ALL_CART_SUCCESS","ALL_CART_FAIL","POST_CART","POST_CART_SUCCESS","ADD_TO_CART","SERVER","DELETE_FROM_CART","axios","AllCartRequest","dispatch","type","data","get","payload","cart","err","error","response","message","postCart","cartState","post","AddToCart","pro","num","getState","_id","state","cartReducer","isCheck","some","item","alert","newItem","SingleDeleteCart","numId","forEach","index","splice"],"mappings":"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","sourcesContent":["import {\r\n    ALL_CART_REQUEST,\r\n    ALL_CART_SUCCESS,\r\n    ALL_CART_FAIL,\r\n    POST_CART,\r\n    POST_CART_SUCCESS,\r\n    ADD_TO_CART,\r\n    SERVER,\r\n    DELETE_FROM_CART,\r\n} from \"./typeCart\";\r\nimport axios from \"axios\";\r\n\r\nexport const AllCartRequest = () => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ALL_CART_REQUEST,\r\n        });\r\n        const { data } = await axios.get(`${SERVER}/api/cart`);\r\n        // console.log(data);\r\n        dispatch({\r\n            type: ALL_CART_SUCCESS,\r\n            payload: {\r\n                cart: data.cart,\r\n            },\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ALL_CART_FAIL,\r\n            payload: {\r\n                error: err.response.data.message || \"Get all cart is fail\",\r\n            },\r\n        });\r\n    }\r\n};\r\nexport const postCart = (cartState) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: POST_CART,\r\n        });\r\n        const { data } = await axios.post(`${SERVER}/api/cart/add`, cartState);\r\n\r\n        dispatch({\r\n            type: POST_CART_SUCCESS,\r\n            payload: {\r\n                cart: data.cart,\r\n            },\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ALL_CART_FAIL,\r\n            payload: {\r\n                error: err.response.data.message || \"Get all cart is fail\",\r\n            },\r\n        });\r\n    }\r\n};\r\n\r\nexport const AddToCart = (pro, num) => async (dispatch, getState) => {\r\n    const { _id } = pro;\r\n    const state = getState();\r\n    const { cart } = state.cartReducer;\r\n    const isCheck = cart.some((item) => item._id === _id);\r\n\r\n    if (isCheck) {\r\n        alert(\"Sản phẩm đã có trong giỏ\");\r\n        return state;\r\n    } else {\r\n        try {\r\n            await dispatch({\r\n                type: ADD_TO_CART,\r\n                payload: {\r\n                    newItem: { num, ...pro },\r\n                },\r\n            });\r\n            await axios.post(`${SERVER}/api/cart/add`, [\r\n                { ...pro, num },\r\n                ...cart,\r\n            ]);\r\n        } catch (err) {\r\n            dispatch({\r\n                type: ALL_CART_FAIL,\r\n                payload: {\r\n                    error: err.response.data.message || \"Post cart fail\",\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    // const { cart } = state.cartReducer;\r\n};\r\nexport const SingleDeleteCart = (numId) => async (dispatch, getState) => {\r\n    const state = getState();\r\n    const { cart } = state.cartReducer;\r\n\r\n    cart.forEach((item, index) => {\r\n        if (item._id === numId) cart.splice(index, 1);\r\n    });\r\n\r\n    try {\r\n        dispatch({\r\n            type: POST_CART,\r\n        });\r\n\r\n        await axios.post(`${SERVER}/api/cart/add`, cart);\r\n\r\n        dispatch({\r\n            type: DELETE_FROM_CART,\r\n            payload: {\r\n                cart: cart,\r\n            },\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ALL_CART_FAIL,\r\n            payload: {\r\n                error: err.response.data.message || \"Remove product fail\",\r\n            },\r\n        });\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}